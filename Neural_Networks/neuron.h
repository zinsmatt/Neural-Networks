#ifndef NEURON_H
#define NEURON_H

#include <vector>

class Neuron
{
    vector<double> weigths; // weights associated with this neuron
    vector<double> input;   // inputs of this neuron
    double output;          // output of the neuron, generated by the activaion function
    double outputBeforeActivation;  // value passed to the activation function
    int numberOfInputs;     // number of inputs

    double bias;    // bias of the neuron
    ActivationFunction activationFunction;  // activation function of this neuron

    NeuralLayer neuralLayer;
    double firstDerivative;

public:
    Neuron();
    Neuron(int nbInputs);
    Neuron(int nbInputs, ActivationFunction af);


    void setNeuralLayer(NeuralLayer& layer) { neuralLayer = layer; }

    /**
     * @brief init: initialise the weights with random value
     */
    void init();


    void setListWeightIn(const vector<double>& list) { listOfWeightIn = list; }
    void setListWeightOut(const vector<double>& list) { listOfWeightOut = list; }

    vector<double>& getListWeightIn() { return listOfWeightIn; }
    vector<double>& getListWeightOut() { return listOfWeightOut; }
};

#endif // NEURON_H
